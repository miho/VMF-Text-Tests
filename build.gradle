apply plugin: 'java'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

if (!hasProperty('mainClass')) {
    ext.mainClass = 'eu.mihosoft.vmftext.tutorial.Main'
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        mavenLocal()
    }
    dependencies {
        classpath group: 'eu.mihosoft.vmf', name: 'vmf-text', version: '0.1-SNAPSHOT'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.5.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
}

sourceSets {
    main {
        java {
            srcDirs = ["$buildDir/vmf-text-src-gen/", 'src/main/java']
        }
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.10'
    testCompile group: 'org.mdkt.compiler', name: 'InMemoryJavaCompiler', version: '1.3.0'
    testCompile group: 'org.codehaus.groovy', name: 'groovy', version: '2.4.12'

    testCompile group: 'eu.mihosoft.vtcc', name: 'vtcc', version: '2018.1.4'
    testCompile group: 'eu.mihosoft.vtcc.tccdist', name: 'tcc-dist', version: '2018.1.3'

    compile group: 'eu.mihosoft.vmf', name: 'vmf-runtime', version: '0.1-SNAPSHOT'
    compile (group: 'org.antlr', name: 'antlr4', version: '4.7')

    compile 'commons-jxpath:commons-jxpath:1.3'
}


task vmfGenModelSources(dependsOn: ['cleanVmf']) {

    // execute the task
    doLast {
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/ArrayLang.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.arraylang",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/MiniJava.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.minijava",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/ExpressionLang.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.expressionlang",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/ExpressionLangPlus.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.expressionlangplus",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/ZeroToMany.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.zerotomany",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/OneToMany.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.onetomany",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/Java8.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.java8",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/MatchCorrectAltTest.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.matchcorrectalt",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/MatchCorrectAltTestTerminalOnly.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.matchcorrectaltterminal",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/NotOp.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.notoptest",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/CSGLang.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.csglang",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/MiniClang.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.miniclang",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/"),
                // model output dir for debugging
                new File("$buildDir/vmf-text-src-modelgen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/TypeMappings.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.typemappings",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/"),
                // model output dir for debugging
                new File("$buildDir/vmf-text-src-modelgen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/JSON.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.json",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/"),
                // model output dir for debugging
                new File("$buildDir/vmf-text-src-modelgen/")
        )
      println("DONE.")
    }
}

task cleanVmf {
  doLast {
      delete "$buildDir/vmf-text-src-gen/"
  }
}

compileJava.dependsOn('vmfGenModelSources')

// fix current working directory on android
test { forkEvery = 1; workingDir = { projectDir } }
