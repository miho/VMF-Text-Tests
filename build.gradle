import java.text.SimpleDateFormat

import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.tasks.compile.JavaCompile

//class VMFTextPluginExtension {
//    // vmfText version
//    String version  = "0.1"
//    String vmfVersion  = "0.1"
//}
//
//class VMFTextPlugin implements Plugin<Project> {
//    void apply(Project project) {
//
//        // add the 'vmf' extension object
//        def extension = project.extensions.create('vmfText', VMFTextPluginExtension)
//
//        // apply the java plugin
//        project.getPluginManager().apply(org.gradle.api.plugins.JavaPlugin.class)
//
//        // we add a vmf configuration to the project
//        project.configurations {
//            vmfText {
//
//            }
//        }
//
//        // and the corresponding source sets
//        project.sourceSets {
//            main {
//                java {
//                    srcDir "${project.buildDir}/vmf-text-src-gen/"
//                }
//            }
//        }
//
//        project.repositories {
//            mavenLocal()
//            mavenCentral()
//            jcenter()
//        }
//
//        project.dependencies {
//            compile    group: 'eu.mihosoft.vmf', name: 'vmf-runtime', version: extension.vmfVersion
//        }
//
//        // code generation task
//        project.task(
//                'vmfTextGenModelSources',
//                //dependsOn: project.tasks.getByName('vmfClasses'),
//                group: 'vmf-text',
//                description: 'Generates Java Code for VMF models defined in the \'vmf\' source set.'
//        ) {
//
//            doLast {
//
//                // add model dependencies to url array
//                def urls = []
//                for(File clsDir : project.sourceSets.getByName('vmf').output.classesDirs) {
//                    urls.add(new File(clsDir.toString())
//                            .toURI().toURL())
//                }
//
//                // load VMF class (depending on version)
//                def vmfClassPath = []
//                project.sourceSets.vmf.compileClasspath.each { entry ->
//                    vmfClassPath.add(entry.toURI().toURL())
//                }
//
//                def classLoader = new URLClassLoader(vmfClassPath as URL[])
//                def vmfClass = classLoader.loadClass("eu.mihosoft.vmf.VMF")
//
//                def vmfModelPaths = []
//                project.sourceSets.vmf.java.each {
//                    vmfCodeFile ->
//
//                        String path = vmfCodeFile.absolutePath
//
//                        if(project.project.sourceSets.vmf.java.srcDirs.size()>1) {
//                            throw new IllegalArgumentException("VMF does not support more than one vmf source folder.")
//                        } else if(project.project.sourceSets.vmf.java.srcDirs.isEmpty()) {
//                            throw new IllegalArgumentException("VMF does not work without a vmf source folder.")
//                        }
//
//                        // we remove the leading part of the string including project location + leading '/'
//                        path = path.substring(project.sourceSets.vmf.java.srcDirs[0].absolutePath.size()+1)
//
//                        // now we remove the java file name
//                        path = path.substring(0,path.lastIndexOf("/"))
//
//                        vmfModelPaths.add(path)
//                }
//
//                // only process each package once
//                vmfModelPaths = vmfModelPaths.unique()
//
//                // generate code for all model paths
//                for(String vmfModelPath : vmfModelPaths) {
//
//                    println(" -> generating code for vmf model in package: " + vmfModelPath)
//
//                    // generate code
//                    vmfClass.generate(new File("$project.buildDir/vmf-src-gen"),
//                            new URLClassLoader(urls as URL[],
//                                    vmfClass.getClassLoader()),
//                            vmfModelPath
//                    )
//                }
//
//            }
//
//        }
//
//        // clean the generated code
//        project.task('vmfClean', group: 'vmf', description: 'Cleans generates Java code.') {
//            doLast {
//                new File("${project.buildDir}/vmf-src-gen/").listFiles().each {
//                    f -> f.deleteDir()
//                }
//            }
//        }
//
//        // add vmfClean task to clean tasks dependencies
//        project.tasks.clean.dependsOn('vmfClean')
//
//
//        // before we compile we need to run the vmf code generator
//        project.tasks.withType(JavaCompile) {
//            compileTask ->
//                if(!compileTask.name.startsWith("compileVmf")) {
//                    compileTask.dependsOn('vmfGenModelSources')
//                }
//        }
//    }
//
//    @LanguageType
//    void registerLanguage(LanguageTypeBuilder<BaseLanguageSourceSet> builder) {
//        builder.setLanguageName("vmfText")
//        builder.defaultImplementation(BaseLanguageSourceSet.class);
//    }
//}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        mavenLocal()
    }
    dependencies {
        classpath group: 'eu.mihosoft.vmf', name: 'vmf-text', version: '0.1-SNAPSHOT'
    }
}

plugins {
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'maven-publish'
    id 'net.nemerosa.versioning' version '2.4.0'
    id 'com.jfrog.bintray' version '1.7.2'
    id 'com.github.ben-manes.versions' version '0.13.0'
}

apply plugin: 'java'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

if (!hasProperty('mainClass')) {
    ext.mainClass = 'eu.mihosoft.vmftext.tutorial.Main'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.8'
}

repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
}

sourceSets {
    main {
        java {
            srcDirs = ["$buildDir/vmf-text-src-gen/", 'src/main/java']
        }
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.10'
    testCompile group: 'org.mdkt.compiler', name: 'InMemoryJavaCompiler', version: '1.3.0'
    testCompile group: 'org.codehaus.groovy', name: 'groovy', version: '2.4.12'

    testCompile group: 'eu.mihosoft.vtcc', name: 'vtcc', version: '2018.2.3'
    testCompile group: 'eu.mihosoft.vtcc.tccdist', name: 'tcc-dist', version: '2018.2.3'

    compile group: 'eu.mihosoft.vmf', name: 'vmf-runtime', version: '0.1-SNAPSHOT'
    compile (group: 'org.antlr', name: 'antlr4', version: '4.7')

    compile 'commons-jxpath:commons-jxpath:1.3'
}

//vmfText {
//    version = "0.1"
//}


task vmfGenModelSources(dependsOn: ['cleanVmf']) {

    // execute the task
    doLast {
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/ArrayLang.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.arraylang",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/"),
                // model output dir for debugging
                new File("$buildDir/vmf-text-src-modelgen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/MiniJava.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.minijava",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/ExpressionLang.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.expressionlang",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/ExpressionLangPlus.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.expressionlangplus",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/ZeroToMany.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.zerotomany",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/OneToMany.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.onetomany",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/Java8.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.java8",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/"),
                // model output dir for debugging
                new File("$buildDir/vmf-text-src-modelgen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/MatchCorrectAltTest.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.matchcorrectalt",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/MatchCorrectAltTestTerminalOnly.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.matchcorrectaltterminal",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/NotOp.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.notoptest",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/CSGLang.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.csglang",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/MiniClang.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.miniclang",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/"),
                // model output dir for debugging
                new File("$buildDir/vmf-text-src-modelgen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/TypeMappings.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.typemappings",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/"),
                // model output dir for debugging
                new File("$buildDir/vmf-text-src-modelgen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/JSON.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.json",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/"),
                // model output dir for debugging
                new File("$buildDir/vmf-text-src-modelgen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/Alternatives.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.alternatives",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/"),
                // model output dir for debugging
                new File("$buildDir/vmf-text-src-modelgen/")
        )
        eu.mihosoft.vmf.vmftext.VMFText.generate(
                // grammar file
                new File(projectDir,"test-code/SubRules.g4"),
                // desired package name
                "eu.mihosoft.vmftext.tests.subrules",
                // desired output directory
                new File("$buildDir/vmf-text-src-gen/"),
                // model output dir for debugging
                new File("$buildDir/vmf-text-src-modelgen/")
        )
      println("DONE.")
    }
}

task cleanVmf {
  doLast {
      delete "$buildDir/vmf-text-src-gen/"
  }
}

compileJava.dependsOn('vmfGenModelSources')
test.dependsOn('vmfGenModelSources')

// fix current working directory on android
test { forkEvery = 1; workingDir = { projectDir } }

// -------------------------------

license {

    header = rootProject.file('config/HEADER')
    strictCheck = true
    ignoreFailures = true

    mapping {
        java   = 'SLASHSTAR_STYLE'
        groovy = 'SLASHSTAR_STYLE'
        fxml   = 'XML_STYLE'
    }

    ext.yearCurrent  = new SimpleDateFormat("yyyy").format(new Date())
    ext.yearSince1   = '2017'
    ext.author1 = 'Michael Hoffer <info@michaelhoffer.de>'
    ext.yearSince2   = '2017'
    ext.author2 = 'Goethe Center for Scientific Computing, University Frankfurt'

    exclude '**/*.svg'

    exclude "$buildDir"

}